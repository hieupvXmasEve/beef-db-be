// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type UsersRole string

const (
	UsersRoleAdmin UsersRole = "admin"
	UsersRoleUser  UsersRole = "user"
)

func (e *UsersRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRole(s)
	case string:
		*e = UsersRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRole: %T", src)
	}
	return nil
}

type NullUsersRole struct {
	UsersRole UsersRole
	Valid     bool // Valid is true if UsersRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRole) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRole), nil
}

type BlogPost struct {
	ID        int32
	Title     string
	Content   string
	ImageUrl  sql.NullString
	CreatedAt sql.NullTime
}

type ContactMessage struct {
	ID        int32
	Name      string
	Email     string
	Message   string
	CreatedAt sql.NullTime
}

type Product struct {
	ID          int32
	CategoryID  int32
	Name        string
	Description sql.NullString
	Price       string
	ImageUrl    sql.NullString
	CreatedAt   sql.NullTime
}

type ProductCategory struct {
	ID          int32
	Name        string
	Description sql.NullString
	CreatedAt   sql.NullTime
}

type User struct {
	ID        int64
	Email     string
	Password  string
	Role      UsersRole
	CreatedAt time.Time
	UpdatedAt time.Time
}

type WebsiteSetting struct {
	ID    int32
	Name  string
	Value string
}
